name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{vars.MONGO_USERNAME}}
  MONGO_PASSWORD: ${{secrets.MONGO_PASSWORD}}
    
jobs:
    unit-testing:
        name: Unit Testing
        # Se utiliza un contenedor que sirva como la base de datos de prueba 
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
          MONGO_URI: 'mongodb://localhost:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        # strategy:
        #   matrix:
        #     nodejs_version: [18, 19, 20]
        #     operating_system: [ubuntu-latest, macos-latest]
        #     exclude:
        #       - nodejs_version: 18
        #         operating_system: macos-latest
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version
          uses: actions/setup-node@v4
          with:
            node-version: 20
        
        - name: Composite Action - Cache & Install NPM packages
          uses: ./.github/custom-actions/npm-action
          with:
            path-of-folder: node_modules
    
        - name: Unit Testing
          id: nodejs-unit-testing-step
          run: npm test
          
        - name: Archive Test Result
        ## Garantizas que este step siempre corra falle o no el step anterior y asi ver el reporte
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: Test-Result-Report
            path: test-results.xml

    code-coverage:
        name: Code coverage
        runs-on: ubuntu-latest
        container:
          image: node:20
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            options: 
              --name mongo
        env:
          MONGO_URI: 'mongodb://mongo:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

          # Este paso ya no es necesario pq estamos en un contenedor con node instalado
        # - name: Setup NodeJS Version
        #   uses: actions/setup-node@v4
        #   with:
        #     node-version: 20           
        - name: Composite Action - Cache & Install NPM packages
          uses: ./.github/custom-actions/npm-action
          with:
            path-of-folder: node_modules
    
        - name: Check code coverage
          continue-on-error: true
          run: npm run coverage
          
        - name: Archive Test Result
          uses: actions/upload-artifact@v4
          with:
            name: Code-Coverage-Result
            path: coverage
            retention-days: 5
    reports-s3:
      needs: [code-coverage, unit-testing]
      runs-on: ubuntu-latest
      continue-on-error: true
      steps:
        - name: Download Test Results
          uses: actions/download-artifact@v4
          with:
            name: Test-Result-Report
        
        - name: Download code coverage artifact
          uses: actions/download-artifact@v4
          with:
            name: Code-Coverage-Result
            
        - name: Merge test files
          run: |
            ls -ltr
            mkdir reports-${{github.sha}}
            mv cobertura-coverage.xml  reports-${{github.sha}}/
            mv test-results.xml reports-${{github.sha}}/
            ls -ltr reports-${{github.sha}}/
        
        - name: Upload to AWS s3
          uses: jakejarvis/s3-sync-action@master
          with:
            args: --follow-symlinks --delete
          env:
            AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: 'us-east-1'   
            SOURCE_DIR: 'reports-${{github.sha}}'
            DEST_DIR: 'reports-${{github.sha}}'
          
    docker:
      needs: [unit-testing, code-coverage]
      name: Containerization
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repo
          uses: actions/checkout@v4
        
        - name: Docker hub login
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
                
        - name: Login to GitHub Container Registry
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}
                
        - name: Docker Build for testing
          uses: docker/build-push-action@v6
          with:
            context: .
            push: false
            tags: ${{ vars.DOCKERHUB_USERNAME }}/nana_python:${{github.sha}}

        - name: Docker Image Test
          run: |
            docker images
            docker run -d --name solar-system-app \
              -p 3000:3000 \
              -e MONGO_URI=$MONGO_URI \
              -e MONGO_USERNAME=$MONGO_USERNAME \
              -e MONGO_PASSWORD=$MONGO_PASSWORD \
              ${{ vars.DOCKERHUB_USERNAME }}/nana_python:${{github.sha}}
            
            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP

            echo Testing Image URL using wget
            wget -q -O - 127.0.0.1:3000/live | grep live

        - name: Container registry push
          uses: docker/build-push-action@v6
          with:
            context: .
            push: true
            tags: | 
              ${{ vars.DOCKERHUB_USERNAME }}/nana_python:${{github.sha}}
              ghcr.io/${{ github.repository_owner }}/solar-system:${{github.sha}}
    
    dev-deploy:
      if: contains(github.ref, 'feature/')
      needs: docker
      uses: ./.github/workflows/reuse-deployment.yml
      secrets:
        k8s-kubeconfig: ${{secrets.KUBECONFIG}}
        mongodb-password: ${{secrets.MONGO_PASSWORD}}
      with:
        mongodb-uri: ${{vars.MONGO_URI}}
        environment: development
        k8s-manifest-dir: kubernetes/development/
        
    dev-integration-test:
      if: contains(github.ref, 'feature/')
      needs: dev-deploy
      runs-on: ubuntu-latest
      steps:
        - name: Test URL output using curl and JQ
          env:
            URL: ${{ needs.dev-deploy.outputs.aplication_url }}
          run: |
            echo $URL
            echo "_______________________________"
            curl https://$URL/live -s -k | jq -r .status | grep -i live

    prod-deploy:
      if: github.ref == 'refs/heads/main'
      needs: docker
      uses: ./.github/workflows/reuse-deployment.yml
      secrets:
        k8s-kubeconfig: ${{secrets.KUBECONFIG}}
        mongodb-password: ${{secrets.MONGO_PASSWORD}}    
      with:
        mongodb-uri: ${{vars.MONGO_URI}}
        environment: production
        k8s-manifest-dir: kubernetes/production/
    
    prod-integration-test:
      if: github.ref == 'refs/heads/main'
      needs: prod-deploy
      runs-on: ubuntu-latest
      steps:
        - name: Test URL output using curl and JQ
          env:
            URL: ${{ needs.prod-deploy.outputs.aplication_url }}
          run: |
            echo $URL
            echo "_______________________________"
            curl https://$URL/live -s -k | jq -r .status | grep -i live


    telegram_notifications:
      if: always()
      needs: [dev-integration-test, prod-integration-test]
      continue-on-error: true
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        - name: send telegram message on push
          uses: appleboy/telegram-action@master
          with:
            to: ${{ secrets.TELEGRAM_TO }}
            token: ${{ secrets.TELEGRAM_TOKEN }}
            message: |
              ${{ github.actor }} created commit:
              Commit message: ${{ github.event.commits[0].message }}
              
              Repository: ${{ github.repository }}
              
              See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}     



